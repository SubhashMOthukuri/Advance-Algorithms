#include <iostream>
#include <vector>
#include <string>

/**
 * @brief Prints the 2D Dynamic Programming table.
 * 
 * @param dp 2D vector with lengths of common suffixes.
 * @param s1 First input string.
 * @param s2 Second input string.
 */
void printDynamicProgrammingTable(const std::vector<std::vector<int>>& dp, const std::string& s1, const std::string& s2) {
    std::cout << "Dynamic Programming Table:\n    ";
    for (char ch : s2) std::cout << " " << ch << " ";
    std::cout << '\n';
    
    for (size_t i = 0; i < dp.size(); ++i) {
        std::cout << (i ? s1[i - 1] : ' ') << " ";
        for (size_t j = 0; j < dp[i].size(); ++j) std::cout << dp[i][j] << " ";
        std::cout << '\n';
    }
}

/**
 * @brief Finds the longest common substring using dynamic programming.
 * 
 * @param s1 First input string.
 * @param s2 Second input string.
 * @return A pair with the longest common substring and its length.
 */
std::pair<std::string, int> longestCommonSubstringUsingDynamicProgramming(const std::string& s1, const std::string& s2) {
    int m = s1.size(), n = s2.size();
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));
    int max_length = 0, end_index_s1 = 0;

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > max_length) {
                    max_length = dp[i][j];
                    end_index_s1 = i;
                }
            }
        }
    }

    std::string longest_substring = s1.substr(end_index_s1 - max_length, max_length);
    printDynamicProgrammingTable(dp, s1, s2);
    return {longest_substring, max_length};
}

int main() {
    std::string s1, s2;
    std::cout << "Enter the first string: "; std::cin >> s1;
    std::cout << "Enter the second string: "; std::cin >> s2;

    if (s1.size() != s2.size()) {
        std::cerr << "Strings must be of the same length.\n"; return 1;
    }

    auto result = longestCommonSubstringUsingDynamicProgramming(s1, s2);
    std::cout << "Longest common substring: " << result.first << '\n';
    std::cout << "Length of longest common substring: " << result.second << '\n';
    return 0;
}